(()=>{"use strict";const e=async e=>{const{[e]:a}=await chrome.storage.local.get(e);return a},a=(e,a)=>{const n=Object.keys(e).length-1,t=e[Object.keys(e)[n]];a.postMessage({message:"SentPerformanceData",currentData:t,historicData:e})};chrome.runtime.onConnect.addListener((n=>{const t=[];n.onMessage.addListener((async o=>{if("SendPerformanceData"!==o.message||!o.domain)return;const s=await e(o.domain);s&&a(s,n);const r=((e,t)=>{const o=t=>{const{[e]:o}=t;o&&(async e=>{a(e,n)})(o.newValue)};return chrome.storage.onChanged.addListener(o),()=>{chrome.storage.onChanged.removeListener(o)}})(o.domain);t.push(r)})),n.onDisconnect.addListener((()=>{console.log("Popup window disconnected :("),t.forEach((e=>e()))}))})),chrome.runtime.onMessage.addListener(((a,n,t)=>{"PerformanceData"===a.message&&(async a=>{let n={};const t=await e(a.domain);n=t?{[a.domain]:{[a.timestamp]:{performance:a.data},...t}}:{[a.domain]:{[a.timestamp]:{performance:a.data}}},await(async e=>await chrome.storage.local.set(e))(n)})(a.data)}))})();